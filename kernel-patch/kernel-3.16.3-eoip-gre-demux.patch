--- linux-3.15/include/net/gre.h.orig	2014-07-04 02:52:26.955400395 +0300
+++ linux-3.15/include/net/gre.h	2014-06-13 23:12:31.745892381 +0300
@@ -9,6 +9,13 @@
 #define GREPROTO_MAX		2
 #define GRE_IP_PROTO_MAX	2
 
+/* handle protocols with non-standard GRE header by ids that do not overlap
+ * with possible standard GRE protocol versions (0x00 - 0x7f)
+ */
+#define GREPROTO_NONSTD_BASE       0x80
+#define GREPROTO_NONSTD_EOIP       (0 + GREPROTO_NONSTD_BASE)
+#define GREPROTO_NONSTD_MAX        (1 + GREPROTO_NONSTD_BASE)
+
 struct gre_protocol {
 	int  (*handler)(struct sk_buff *skb);
 	void (*err_handler)(struct sk_buff *skb, u32 info);
--- linux-3.15/net/ipv4/gre_demux.c.orig	2014-07-04 02:53:03.975398766 +0300
+++ linux-3.15/net/ipv4/gre_demux.c	2014-06-16 00:10:05.118137863 +0300
@@ -30,13 +30,19 @@
 #include <net/route.h>
 #include <net/xfrm.h>
 
-static const struct gre_protocol __rcu *gre_proto[GREPROTO_MAX] __read_mostly;
+#define GREPROTO_CNT \
+       (GREPROTO_MAX + GREPROTO_NONSTD_MAX - GREPROTO_NONSTD_BASE)
+
+static const struct gre_protocol __rcu *gre_proto[GREPROTO_CNT] __read_mostly;
 static struct gre_cisco_protocol __rcu *gre_cisco_proto_list[GRE_IP_PROTO_MAX];
 
 int gre_add_protocol(const struct gre_protocol *proto, u8 version)
 {
-	if (version >= GREPROTO_MAX)
-		return -EINVAL;
+	if (version >= GREPROTO_NONSTD_BASE && version < GREPROTO_NONSTD_MAX)
+		version -= GREPROTO_NONSTD_BASE - GREPROTO_MAX;
+	else
+		if (version >= GREPROTO_MAX)
+			return -EINVAL;
 
 	return (cmpxchg((const struct gre_protocol **)&gre_proto[version], NULL, proto) == NULL) ?
 		0 : -EBUSY;
@@ -47,8 +53,11 @@ int gre_del_protocol(const struct gre_pr
 {
 	int ret;
 
-	if (version >= GREPROTO_MAX)
-		return -EINVAL;
+	if (version >= GREPROTO_NONSTD_BASE && version < GREPROTO_NONSTD_MAX)
+		version -= GREPROTO_NONSTD_BASE - GREPROTO_MAX;
+	else
+		if (version >= GREPROTO_MAX)
+			return -EINVAL;
 
 	ret = (cmpxchg((const struct gre_protocol **)&gre_proto[version], proto, NULL) == proto) ?
 		0 : -EBUSY;
@@ -275,12 +284,22 @@ static int gre_rcv(struct sk_buff *skb)
 	u8 ver;
 	int ret;
 
+	/* the standard GRE header is 12 octets; the EOIP header is 8
+	 * 4 octets long ethernet packet can not be valid
+	 */
 	if (!pskb_may_pull(skb, 12))
 		goto drop;
 
-	ver = skb->data[1]&0x7f;
-	if (ver >= GREPROTO_MAX)
-		goto drop;
+	/* check for custom EOIP header */
+	if (skb->data[0] == 0x20 && skb->data[1] == 0x01 &&
+		skb->data[2] == 0x64 && skb->data[3] == 0x00)
+		ver = GREPROTO_NONSTD_EOIP - GREPROTO_NONSTD_BASE
+			+ GREPROTO_MAX;
+	else {
+		ver = skb->data[1]&0x7f;
+		if (ver >= GREPROTO_MAX)
+			goto drop;
+	}
 
 	rcu_read_lock();
 	proto = rcu_dereference(gre_proto[ver]);
@@ -301,10 +320,19 @@ static void gre_err(struct sk_buff *skb,
 {
 	const struct gre_protocol *proto;
 	const struct iphdr *iph = (const struct iphdr *)skb->data;
-	u8 ver = skb->data[(iph->ihl<<2) + 1]&0x7f;
+	u8 ver;
 
-	if (ver >= GREPROTO_MAX)
-		return;
+	if (skb->data[(iph->ihl<<2) + 0] == 0x20 &&
+		skb->data[(iph->ihl<<2) + 1] == 0x01 &&
+		skb->data[(iph->ihl<<2) + 2] == 0x64 &&
+		skb->data[(iph->ihl<<2) + 3] == 0x00)
+		ver = GREPROTO_NONSTD_EOIP - GREPROTO_NONSTD_BASE
+			+ GREPROTO_MAX;
+	else {
+		ver = skb->data[(iph->ihl<<2) + 1]&0x7f;
+		if (ver >= GREPROTO_MAX)
+			return;
+	}
 
 	rcu_read_lock();
 	proto = rcu_dereference(gre_proto[ver]);
